"""autogenerated by genpy from humanoid_nav_msgs/ClipFootstepRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import humanoid_nav_msgs.msg

class ClipFootstepRequest(genpy.Message):
  _md5sum = "f22cfce442b381849d82602383b052c7"
  _type = "humanoid_nav_msgs/ClipFootstepRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """StepTarget step

================================================================================
MSG: humanoid_nav_msgs/StepTarget
# Target for a single stepping motion of a humanoid's leg

geometry_msgs/Pose2D pose   # step pose as relative offset to last leg
uint8 leg                   # which leg to use (left/right, see below)

uint8 right=0               # right leg constant
uint8 left=1                # left leg constant

================================================================================
MSG: geometry_msgs/Pose2D
# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta
"""
  __slots__ = ['step']
  _slot_types = ['humanoid_nav_msgs/StepTarget']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       step

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ClipFootstepRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.step is None:
        self.step = humanoid_nav_msgs.msg.StepTarget()
    else:
      self.step = humanoid_nav_msgs.msg.StepTarget()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3dB.pack(_x.step.pose.x, _x.step.pose.y, _x.step.pose.theta, _x.step.leg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.step is None:
        self.step = humanoid_nav_msgs.msg.StepTarget()
      end = 0
      _x = self
      start = end
      end += 25
      (_x.step.pose.x, _x.step.pose.y, _x.step.pose.theta, _x.step.leg,) = _struct_3dB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3dB.pack(_x.step.pose.x, _x.step.pose.y, _x.step.pose.theta, _x.step.leg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.step is None:
        self.step = humanoid_nav_msgs.msg.StepTarget()
      end = 0
      _x = self
      start = end
      end += 25
      (_x.step.pose.x, _x.step.pose.y, _x.step.pose.theta, _x.step.leg,) = _struct_3dB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3dB = struct.Struct("<3dB")
"""autogenerated by genpy from humanoid_nav_msgs/ClipFootstepResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import humanoid_nav_msgs.msg

class ClipFootstepResponse(genpy.Message):
  _md5sum = "f22cfce442b381849d82602383b052c7"
  _type = "humanoid_nav_msgs/ClipFootstepResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """StepTarget step


================================================================================
MSG: humanoid_nav_msgs/StepTarget
# Target for a single stepping motion of a humanoid's leg

geometry_msgs/Pose2D pose   # step pose as relative offset to last leg
uint8 leg                   # which leg to use (left/right, see below)

uint8 right=0               # right leg constant
uint8 left=1                # left leg constant

================================================================================
MSG: geometry_msgs/Pose2D
# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta
"""
  __slots__ = ['step']
  _slot_types = ['humanoid_nav_msgs/StepTarget']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       step

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ClipFootstepResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.step is None:
        self.step = humanoid_nav_msgs.msg.StepTarget()
    else:
      self.step = humanoid_nav_msgs.msg.StepTarget()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3dB.pack(_x.step.pose.x, _x.step.pose.y, _x.step.pose.theta, _x.step.leg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.step is None:
        self.step = humanoid_nav_msgs.msg.StepTarget()
      end = 0
      _x = self
      start = end
      end += 25
      (_x.step.pose.x, _x.step.pose.y, _x.step.pose.theta, _x.step.leg,) = _struct_3dB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3dB.pack(_x.step.pose.x, _x.step.pose.y, _x.step.pose.theta, _x.step.leg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.step is None:
        self.step = humanoid_nav_msgs.msg.StepTarget()
      end = 0
      _x = self
      start = end
      end += 25
      (_x.step.pose.x, _x.step.pose.y, _x.step.pose.theta, _x.step.leg,) = _struct_3dB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3dB = struct.Struct("<3dB")
class ClipFootstep(object):
  _type          = 'humanoid_nav_msgs/ClipFootstep'
  _md5sum = '394ac576028f40af6569704f845b86a1'
  _request_class  = ClipFootstepRequest
  _response_class = ClipFootstepResponse
