"""autogenerated by genpy from flor_footstep_planner_msgs/PlanAtlasFootstepsRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import flor_footstep_planner_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class PlanAtlasFootstepsRequest(genpy.Message):
  _md5sum = "d0dd16a8395d245fd8cb476cf0fc5269"
  _type = "flor_footstep_planner_msgs/PlanAtlasFootstepsRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

uint8 planning_mode


uint8 start_type
uint8 goal_type

geometry_msgs/Pose start
flor_footstep_planner_msgs/FeetPoses feet_start_poses

geometry_msgs/Pose goal
flor_footstep_planner_msgs/FeetPoses feet_goal_poses

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: flor_footstep_planner_msgs/FeetPoses
std_msgs/Header header
#flor_atlas_msgs/AtlasBehaviorFootData left
#flor_atlas_msgs/AtlasBehaviorFootData right

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['planning_mode','start_type','goal_type','start','feet_start_poses','goal','feet_goal_poses']
  _slot_types = ['uint8','uint8','uint8','geometry_msgs/Pose','flor_footstep_planner_msgs/FeetPoses','geometry_msgs/Pose','flor_footstep_planner_msgs/FeetPoses']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       planning_mode,start_type,goal_type,start,feet_start_poses,goal,feet_goal_poses

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanAtlasFootstepsRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.planning_mode is None:
        self.planning_mode = 0
      if self.start_type is None:
        self.start_type = 0
      if self.goal_type is None:
        self.goal_type = 0
      if self.start is None:
        self.start = geometry_msgs.msg.Pose()
      if self.feet_start_poses is None:
        self.feet_start_poses = flor_footstep_planner_msgs.msg.FeetPoses()
      if self.goal is None:
        self.goal = geometry_msgs.msg.Pose()
      if self.feet_goal_poses is None:
        self.feet_goal_poses = flor_footstep_planner_msgs.msg.FeetPoses()
    else:
      self.planning_mode = 0
      self.start_type = 0
      self.goal_type = 0
      self.start = geometry_msgs.msg.Pose()
      self.feet_start_poses = flor_footstep_planner_msgs.msg.FeetPoses()
      self.goal = geometry_msgs.msg.Pose()
      self.feet_goal_poses = flor_footstep_planner_msgs.msg.FeetPoses()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3B7d3I.pack(_x.planning_mode, _x.start_type, _x.goal_type, _x.start.position.x, _x.start.position.y, _x.start.position.z, _x.start.orientation.x, _x.start.orientation.y, _x.start.orientation.z, _x.start.orientation.w, _x.feet_start_poses.header.seq, _x.feet_start_poses.header.stamp.secs, _x.feet_start_poses.header.stamp.nsecs))
      _x = self.feet_start_poses.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.goal.position.x, _x.goal.position.y, _x.goal.position.z, _x.goal.orientation.x, _x.goal.orientation.y, _x.goal.orientation.z, _x.goal.orientation.w, _x.feet_goal_poses.header.seq, _x.feet_goal_poses.header.stamp.secs, _x.feet_goal_poses.header.stamp.nsecs))
      _x = self.feet_goal_poses.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.start is None:
        self.start = geometry_msgs.msg.Pose()
      if self.feet_start_poses is None:
        self.feet_start_poses = flor_footstep_planner_msgs.msg.FeetPoses()
      if self.goal is None:
        self.goal = geometry_msgs.msg.Pose()
      if self.feet_goal_poses is None:
        self.feet_goal_poses = flor_footstep_planner_msgs.msg.FeetPoses()
      end = 0
      _x = self
      start = end
      end += 71
      (_x.planning_mode, _x.start_type, _x.goal_type, _x.start.position.x, _x.start.position.y, _x.start.position.z, _x.start.orientation.x, _x.start.orientation.y, _x.start.orientation.z, _x.start.orientation.w, _x.feet_start_poses.header.seq, _x.feet_start_poses.header.stamp.secs, _x.feet_start_poses.header.stamp.nsecs,) = _struct_3B7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.feet_start_poses.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.feet_start_poses.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.goal.position.x, _x.goal.position.y, _x.goal.position.z, _x.goal.orientation.x, _x.goal.orientation.y, _x.goal.orientation.z, _x.goal.orientation.w, _x.feet_goal_poses.header.seq, _x.feet_goal_poses.header.stamp.secs, _x.feet_goal_poses.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.feet_goal_poses.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.feet_goal_poses.header.frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3B7d3I.pack(_x.planning_mode, _x.start_type, _x.goal_type, _x.start.position.x, _x.start.position.y, _x.start.position.z, _x.start.orientation.x, _x.start.orientation.y, _x.start.orientation.z, _x.start.orientation.w, _x.feet_start_poses.header.seq, _x.feet_start_poses.header.stamp.secs, _x.feet_start_poses.header.stamp.nsecs))
      _x = self.feet_start_poses.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.goal.position.x, _x.goal.position.y, _x.goal.position.z, _x.goal.orientation.x, _x.goal.orientation.y, _x.goal.orientation.z, _x.goal.orientation.w, _x.feet_goal_poses.header.seq, _x.feet_goal_poses.header.stamp.secs, _x.feet_goal_poses.header.stamp.nsecs))
      _x = self.feet_goal_poses.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.start is None:
        self.start = geometry_msgs.msg.Pose()
      if self.feet_start_poses is None:
        self.feet_start_poses = flor_footstep_planner_msgs.msg.FeetPoses()
      if self.goal is None:
        self.goal = geometry_msgs.msg.Pose()
      if self.feet_goal_poses is None:
        self.feet_goal_poses = flor_footstep_planner_msgs.msg.FeetPoses()
      end = 0
      _x = self
      start = end
      end += 71
      (_x.planning_mode, _x.start_type, _x.goal_type, _x.start.position.x, _x.start.position.y, _x.start.position.z, _x.start.orientation.x, _x.start.orientation.y, _x.start.orientation.z, _x.start.orientation.w, _x.feet_start_poses.header.seq, _x.feet_start_poses.header.stamp.secs, _x.feet_start_poses.header.stamp.nsecs,) = _struct_3B7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.feet_start_poses.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.feet_start_poses.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.goal.position.x, _x.goal.position.y, _x.goal.position.z, _x.goal.orientation.x, _x.goal.orientation.y, _x.goal.orientation.z, _x.goal.orientation.w, _x.feet_goal_poses.header.seq, _x.feet_goal_poses.header.stamp.secs, _x.feet_goal_poses.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.feet_goal_poses.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.feet_goal_poses.header.frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3B7d3I = struct.Struct("<3B7d3I")
_struct_7d3I = struct.Struct("<7d3I")
"""autogenerated by genpy from flor_footstep_planner_msgs/PlanAtlasFootstepsResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import flor_footstep_planner_msgs.msg
import std_msgs.msg

class PlanAtlasFootstepsResponse(genpy.Message):
  _md5sum = "d53bcbc2950f8e4e2860c37137bc887e"
  _type = "flor_footstep_planner_msgs/PlanAtlasFootstepsResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool result
uint32 status_flags
uint8 planning_mode
flor_footstep_planner_msgs/AtlasWalkFootstepPlan walk_plan
flor_footstep_planner_msgs/AtlasStepFootstepPlan step_plan
flor_footstep_planner_msgs/FeetPoses feet_start_poses
float64 costs
float64 final_eps
float64 planning_time
int64 expanded_states


================================================================================
MSG: flor_footstep_planner_msgs/AtlasWalkFootstepPlan
std_msgs/Header header
#flor_atlas_msgs/AtlasBehaviorWalkSpec[] step_plan

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: flor_footstep_planner_msgs/AtlasStepFootstepPlan
std_msgs/Header header
#flor_atlas_msgs/AtlasBehaviorStepSpec[] step_plan

================================================================================
MSG: flor_footstep_planner_msgs/FeetPoses
std_msgs/Header header
#flor_atlas_msgs/AtlasBehaviorFootData left
#flor_atlas_msgs/AtlasBehaviorFootData right

"""
  __slots__ = ['result','status_flags','planning_mode','walk_plan','step_plan','feet_start_poses','costs','final_eps','planning_time','expanded_states']
  _slot_types = ['bool','uint32','uint8','flor_footstep_planner_msgs/AtlasWalkFootstepPlan','flor_footstep_planner_msgs/AtlasStepFootstepPlan','flor_footstep_planner_msgs/FeetPoses','float64','float64','float64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result,status_flags,planning_mode,walk_plan,step_plan,feet_start_poses,costs,final_eps,planning_time,expanded_states

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanAtlasFootstepsResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = False
      if self.status_flags is None:
        self.status_flags = 0
      if self.planning_mode is None:
        self.planning_mode = 0
      if self.walk_plan is None:
        self.walk_plan = flor_footstep_planner_msgs.msg.AtlasWalkFootstepPlan()
      if self.step_plan is None:
        self.step_plan = flor_footstep_planner_msgs.msg.AtlasStepFootstepPlan()
      if self.feet_start_poses is None:
        self.feet_start_poses = flor_footstep_planner_msgs.msg.FeetPoses()
      if self.costs is None:
        self.costs = 0.
      if self.final_eps is None:
        self.final_eps = 0.
      if self.planning_time is None:
        self.planning_time = 0.
      if self.expanded_states is None:
        self.expanded_states = 0
    else:
      self.result = False
      self.status_flags = 0
      self.planning_mode = 0
      self.walk_plan = flor_footstep_planner_msgs.msg.AtlasWalkFootstepPlan()
      self.step_plan = flor_footstep_planner_msgs.msg.AtlasStepFootstepPlan()
      self.feet_start_poses = flor_footstep_planner_msgs.msg.FeetPoses()
      self.costs = 0.
      self.final_eps = 0.
      self.planning_time = 0.
      self.expanded_states = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_BIB3I.pack(_x.result, _x.status_flags, _x.planning_mode, _x.walk_plan.header.seq, _x.walk_plan.header.stamp.secs, _x.walk_plan.header.stamp.nsecs))
      _x = self.walk_plan.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.step_plan.header.seq, _x.step_plan.header.stamp.secs, _x.step_plan.header.stamp.nsecs))
      _x = self.step_plan.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.feet_start_poses.header.seq, _x.feet_start_poses.header.stamp.secs, _x.feet_start_poses.header.stamp.nsecs))
      _x = self.feet_start_poses.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3dq.pack(_x.costs, _x.final_eps, _x.planning_time, _x.expanded_states))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.walk_plan is None:
        self.walk_plan = flor_footstep_planner_msgs.msg.AtlasWalkFootstepPlan()
      if self.step_plan is None:
        self.step_plan = flor_footstep_planner_msgs.msg.AtlasStepFootstepPlan()
      if self.feet_start_poses is None:
        self.feet_start_poses = flor_footstep_planner_msgs.msg.FeetPoses()
      end = 0
      _x = self
      start = end
      end += 18
      (_x.result, _x.status_flags, _x.planning_mode, _x.walk_plan.header.seq, _x.walk_plan.header.stamp.secs, _x.walk_plan.header.stamp.nsecs,) = _struct_BIB3I.unpack(str[start:end])
      self.result = bool(self.result)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.walk_plan.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.walk_plan.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.step_plan.header.seq, _x.step_plan.header.stamp.secs, _x.step_plan.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.step_plan.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.step_plan.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.feet_start_poses.header.seq, _x.feet_start_poses.header.stamp.secs, _x.feet_start_poses.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.feet_start_poses.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.feet_start_poses.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.costs, _x.final_eps, _x.planning_time, _x.expanded_states,) = _struct_3dq.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_BIB3I.pack(_x.result, _x.status_flags, _x.planning_mode, _x.walk_plan.header.seq, _x.walk_plan.header.stamp.secs, _x.walk_plan.header.stamp.nsecs))
      _x = self.walk_plan.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.step_plan.header.seq, _x.step_plan.header.stamp.secs, _x.step_plan.header.stamp.nsecs))
      _x = self.step_plan.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.feet_start_poses.header.seq, _x.feet_start_poses.header.stamp.secs, _x.feet_start_poses.header.stamp.nsecs))
      _x = self.feet_start_poses.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3dq.pack(_x.costs, _x.final_eps, _x.planning_time, _x.expanded_states))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.walk_plan is None:
        self.walk_plan = flor_footstep_planner_msgs.msg.AtlasWalkFootstepPlan()
      if self.step_plan is None:
        self.step_plan = flor_footstep_planner_msgs.msg.AtlasStepFootstepPlan()
      if self.feet_start_poses is None:
        self.feet_start_poses = flor_footstep_planner_msgs.msg.FeetPoses()
      end = 0
      _x = self
      start = end
      end += 18
      (_x.result, _x.status_flags, _x.planning_mode, _x.walk_plan.header.seq, _x.walk_plan.header.stamp.secs, _x.walk_plan.header.stamp.nsecs,) = _struct_BIB3I.unpack(str[start:end])
      self.result = bool(self.result)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.walk_plan.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.walk_plan.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.step_plan.header.seq, _x.step_plan.header.stamp.secs, _x.step_plan.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.step_plan.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.step_plan.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.feet_start_poses.header.seq, _x.feet_start_poses.header.stamp.secs, _x.feet_start_poses.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.feet_start_poses.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.feet_start_poses.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.costs, _x.final_eps, _x.planning_time, _x.expanded_states,) = _struct_3dq.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_3dq = struct.Struct("<3dq")
_struct_BIB3I = struct.Struct("<BIB3I")
class PlanAtlasFootsteps(object):
  _type          = 'flor_footstep_planner_msgs/PlanAtlasFootsteps'
  _md5sum = '0f62adf564b1b5c7f8a5183f940c1130'
  _request_class  = PlanAtlasFootstepsRequest
  _response_class = PlanAtlasFootstepsResponse
