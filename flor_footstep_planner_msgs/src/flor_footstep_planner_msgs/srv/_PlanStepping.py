"""autogenerated by genpy from flor_footstep_planner_msgs/PlanSteppingRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import flor_footstep_planner_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class PlanSteppingRequest(genpy.Message):
  _md5sum = "47b835e40c1dbb489d3b5a1809d4fc5c"
  _type = "flor_footstep_planner_msgs/PlanSteppingRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """flor_footstep_planner_msgs/SteppingRequest stepping_request

================================================================================
MSG: flor_footstep_planner_msgs/SteppingRequest
# service message for simple stepping
# start precision
uint8 start_type            # start pose precision (see FootstepPlan.srv)

geometry_msgs/Pose start
flor_footstep_planner_msgs/FeetPoses feet_start_poses

flor_footstep_planner_msgs/Stepping stepping

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: flor_footstep_planner_msgs/FeetPoses
std_msgs/Header header
#flor_atlas_msgs/AtlasBehaviorFootData left
#flor_atlas_msgs/AtlasBehaviorFootData right

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: flor_footstep_planner_msgs/Stepping
# for special walk modes
uint8 planning_mode         # select planning mode (see FootstepPlan.msg)

uint8 steps # number of steps which should be executed
bool ignore_collision

float32 step_distance_forward   # [m]
float32 step_distance_sideward  # [m]
float32 turn_angle              # [rad]

bool close_step
bool swap_start_foot
bool extra_seperation

bool use_terrain
bool generate_terrain_model

bool override
float32 roll
float32 pitch
float32 swing_height
float32 lift_height
float32 knee_nominal
float32 goal_z

uint8 walk_mode

# walk modes
uint8 FORWARD       = 0 # special modes starting here
uint8 BACKWARD      = 1
uint8 STRAFE_LEFT   = 2
uint8 STRAFE_RIGHT  = 3
uint8 ROTATE_LEFT   = 4
uint8 ROTATE_RIGHT  = 5
uint8 SAMPLING      = 6

"""
  __slots__ = ['stepping_request']
  _slot_types = ['flor_footstep_planner_msgs/SteppingRequest']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stepping_request

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanSteppingRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stepping_request is None:
        self.stepping_request = flor_footstep_planner_msgs.msg.SteppingRequest()
    else:
      self.stepping_request = flor_footstep_planner_msgs.msg.SteppingRequest()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B7d3I.pack(_x.stepping_request.start_type, _x.stepping_request.start.position.x, _x.stepping_request.start.position.y, _x.stepping_request.start.position.z, _x.stepping_request.start.orientation.x, _x.stepping_request.start.orientation.y, _x.stepping_request.start.orientation.z, _x.stepping_request.start.orientation.w, _x.stepping_request.feet_start_poses.header.seq, _x.stepping_request.feet_start_poses.header.stamp.secs, _x.stepping_request.feet_start_poses.header.stamp.nsecs))
      _x = self.stepping_request.feet_start_poses.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3B3f6B6fB.pack(_x.stepping_request.stepping.planning_mode, _x.stepping_request.stepping.steps, _x.stepping_request.stepping.ignore_collision, _x.stepping_request.stepping.step_distance_forward, _x.stepping_request.stepping.step_distance_sideward, _x.stepping_request.stepping.turn_angle, _x.stepping_request.stepping.close_step, _x.stepping_request.stepping.swap_start_foot, _x.stepping_request.stepping.extra_seperation, _x.stepping_request.stepping.use_terrain, _x.stepping_request.stepping.generate_terrain_model, _x.stepping_request.stepping.override, _x.stepping_request.stepping.roll, _x.stepping_request.stepping.pitch, _x.stepping_request.stepping.swing_height, _x.stepping_request.stepping.lift_height, _x.stepping_request.stepping.knee_nominal, _x.stepping_request.stepping.goal_z, _x.stepping_request.stepping.walk_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stepping_request is None:
        self.stepping_request = flor_footstep_planner_msgs.msg.SteppingRequest()
      end = 0
      _x = self
      start = end
      end += 69
      (_x.stepping_request.start_type, _x.stepping_request.start.position.x, _x.stepping_request.start.position.y, _x.stepping_request.start.position.z, _x.stepping_request.start.orientation.x, _x.stepping_request.start.orientation.y, _x.stepping_request.start.orientation.z, _x.stepping_request.start.orientation.w, _x.stepping_request.feet_start_poses.header.seq, _x.stepping_request.feet_start_poses.header.stamp.secs, _x.stepping_request.feet_start_poses.header.stamp.nsecs,) = _struct_B7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stepping_request.feet_start_poses.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.stepping_request.feet_start_poses.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 46
      (_x.stepping_request.stepping.planning_mode, _x.stepping_request.stepping.steps, _x.stepping_request.stepping.ignore_collision, _x.stepping_request.stepping.step_distance_forward, _x.stepping_request.stepping.step_distance_sideward, _x.stepping_request.stepping.turn_angle, _x.stepping_request.stepping.close_step, _x.stepping_request.stepping.swap_start_foot, _x.stepping_request.stepping.extra_seperation, _x.stepping_request.stepping.use_terrain, _x.stepping_request.stepping.generate_terrain_model, _x.stepping_request.stepping.override, _x.stepping_request.stepping.roll, _x.stepping_request.stepping.pitch, _x.stepping_request.stepping.swing_height, _x.stepping_request.stepping.lift_height, _x.stepping_request.stepping.knee_nominal, _x.stepping_request.stepping.goal_z, _x.stepping_request.stepping.walk_mode,) = _struct_3B3f6B6fB.unpack(str[start:end])
      self.stepping_request.stepping.ignore_collision = bool(self.stepping_request.stepping.ignore_collision)
      self.stepping_request.stepping.close_step = bool(self.stepping_request.stepping.close_step)
      self.stepping_request.stepping.swap_start_foot = bool(self.stepping_request.stepping.swap_start_foot)
      self.stepping_request.stepping.extra_seperation = bool(self.stepping_request.stepping.extra_seperation)
      self.stepping_request.stepping.use_terrain = bool(self.stepping_request.stepping.use_terrain)
      self.stepping_request.stepping.generate_terrain_model = bool(self.stepping_request.stepping.generate_terrain_model)
      self.stepping_request.stepping.override = bool(self.stepping_request.stepping.override)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B7d3I.pack(_x.stepping_request.start_type, _x.stepping_request.start.position.x, _x.stepping_request.start.position.y, _x.stepping_request.start.position.z, _x.stepping_request.start.orientation.x, _x.stepping_request.start.orientation.y, _x.stepping_request.start.orientation.z, _x.stepping_request.start.orientation.w, _x.stepping_request.feet_start_poses.header.seq, _x.stepping_request.feet_start_poses.header.stamp.secs, _x.stepping_request.feet_start_poses.header.stamp.nsecs))
      _x = self.stepping_request.feet_start_poses.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3B3f6B6fB.pack(_x.stepping_request.stepping.planning_mode, _x.stepping_request.stepping.steps, _x.stepping_request.stepping.ignore_collision, _x.stepping_request.stepping.step_distance_forward, _x.stepping_request.stepping.step_distance_sideward, _x.stepping_request.stepping.turn_angle, _x.stepping_request.stepping.close_step, _x.stepping_request.stepping.swap_start_foot, _x.stepping_request.stepping.extra_seperation, _x.stepping_request.stepping.use_terrain, _x.stepping_request.stepping.generate_terrain_model, _x.stepping_request.stepping.override, _x.stepping_request.stepping.roll, _x.stepping_request.stepping.pitch, _x.stepping_request.stepping.swing_height, _x.stepping_request.stepping.lift_height, _x.stepping_request.stepping.knee_nominal, _x.stepping_request.stepping.goal_z, _x.stepping_request.stepping.walk_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stepping_request is None:
        self.stepping_request = flor_footstep_planner_msgs.msg.SteppingRequest()
      end = 0
      _x = self
      start = end
      end += 69
      (_x.stepping_request.start_type, _x.stepping_request.start.position.x, _x.stepping_request.start.position.y, _x.stepping_request.start.position.z, _x.stepping_request.start.orientation.x, _x.stepping_request.start.orientation.y, _x.stepping_request.start.orientation.z, _x.stepping_request.start.orientation.w, _x.stepping_request.feet_start_poses.header.seq, _x.stepping_request.feet_start_poses.header.stamp.secs, _x.stepping_request.feet_start_poses.header.stamp.nsecs,) = _struct_B7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stepping_request.feet_start_poses.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.stepping_request.feet_start_poses.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 46
      (_x.stepping_request.stepping.planning_mode, _x.stepping_request.stepping.steps, _x.stepping_request.stepping.ignore_collision, _x.stepping_request.stepping.step_distance_forward, _x.stepping_request.stepping.step_distance_sideward, _x.stepping_request.stepping.turn_angle, _x.stepping_request.stepping.close_step, _x.stepping_request.stepping.swap_start_foot, _x.stepping_request.stepping.extra_seperation, _x.stepping_request.stepping.use_terrain, _x.stepping_request.stepping.generate_terrain_model, _x.stepping_request.stepping.override, _x.stepping_request.stepping.roll, _x.stepping_request.stepping.pitch, _x.stepping_request.stepping.swing_height, _x.stepping_request.stepping.lift_height, _x.stepping_request.stepping.knee_nominal, _x.stepping_request.stepping.goal_z, _x.stepping_request.stepping.walk_mode,) = _struct_3B3f6B6fB.unpack(str[start:end])
      self.stepping_request.stepping.ignore_collision = bool(self.stepping_request.stepping.ignore_collision)
      self.stepping_request.stepping.close_step = bool(self.stepping_request.stepping.close_step)
      self.stepping_request.stepping.swap_start_foot = bool(self.stepping_request.stepping.swap_start_foot)
      self.stepping_request.stepping.extra_seperation = bool(self.stepping_request.stepping.extra_seperation)
      self.stepping_request.stepping.use_terrain = bool(self.stepping_request.stepping.use_terrain)
      self.stepping_request.stepping.generate_terrain_model = bool(self.stepping_request.stepping.generate_terrain_model)
      self.stepping_request.stepping.override = bool(self.stepping_request.stepping.override)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B7d3I = struct.Struct("<B7d3I")
_struct_3B3f6B6fB = struct.Struct("<3B3f6B6fB")
"""autogenerated by genpy from flor_footstep_planner_msgs/PlanSteppingResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import flor_footstep_planner_msgs.msg
import std_msgs.msg

class PlanSteppingResponse(genpy.Message):
  _md5sum = "d1d5a4f76836e61e003fb50a00ad543d"
  _type = "flor_footstep_planner_msgs/PlanSteppingResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool result
uint32 status_flags
flor_footstep_planner_msgs/FootstepPlan footstep_plan
flor_footstep_planner_msgs/FeetPoses feet_start_poses
float64 costs
float64 final_eps
float64 planning_time
int64 expanded_states


================================================================================
MSG: flor_footstep_planner_msgs/FootstepPlan
std_msgs/Header header
uint8 planning_mode                                         # (see below)

uint8 MODE_WALK                   = 0                       # simple planning for flat ground (default)
uint8 MODE_STEP                   = 1                       # finer planning of each step
uint8 MODE_FEET_REALIGN_ON_CENTER = 2                       # realign feet relative to robot pose
uint8 MODE_FEET_REALIGN_ON_LEFT   = 3                       # realign feet relative to left foot
uint8 MODE_FEET_REALIGN_ON_RIGHT  = 4                       # realign feet relative to right foot
uint8 MODE_WIDE_STANCE            = 5                       # special mode for wide stance

flor_footstep_planner_msgs/StepTarget[] step_plan           # resulting general footstep plan

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: flor_footstep_planner_msgs/StepTarget
# Target for a single stepping motion of a humanoid's leg
std_msgs/Header header
int32 step_index                            # Step index
uint8 foot_index                            # which leg to use (LEFT_FOOT/RIGHT_FOOT)
#flor_atlas_msgs/AtlasBehaviorFootData foot  # Foothold to step to
float32 step_duration                       # duration of the single support phase
float32 sway_duration                       # duration of the double support phase (optional)
float32 swing_height                        # step apex above the lift height while swinging the leg
float32 lift_height                         # height to lift vertically before moving the foot (optional)
int32 toe_off                               # specify whether toe-off is allowed or not during swaying
float32 knee_nominal                        # Nominal knee angle during the step. (optional)
float32 max_body_accel                      # Maximum body acceleration to determine minimum sway duration (optional)
float32 max_foot_vel                        # Maximum foot velocity to determine minimum step duration (optional)
float32 sway_end_dist                       # Distance short of the foot to aim for at the end of sway (in meters) (optional)
float32 step_end_dist                       # Distance to lean into the step before the foot comes down (in meters) (optional)

================================================================================
MSG: flor_footstep_planner_msgs/FeetPoses
std_msgs/Header header
#flor_atlas_msgs/AtlasBehaviorFootData left
#flor_atlas_msgs/AtlasBehaviorFootData right

"""
  __slots__ = ['result','status_flags','footstep_plan','feet_start_poses','costs','final_eps','planning_time','expanded_states']
  _slot_types = ['bool','uint32','flor_footstep_planner_msgs/FootstepPlan','flor_footstep_planner_msgs/FeetPoses','float64','float64','float64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result,status_flags,footstep_plan,feet_start_poses,costs,final_eps,planning_time,expanded_states

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanSteppingResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = False
      if self.status_flags is None:
        self.status_flags = 0
      if self.footstep_plan is None:
        self.footstep_plan = flor_footstep_planner_msgs.msg.FootstepPlan()
      if self.feet_start_poses is None:
        self.feet_start_poses = flor_footstep_planner_msgs.msg.FeetPoses()
      if self.costs is None:
        self.costs = 0.
      if self.final_eps is None:
        self.final_eps = 0.
      if self.planning_time is None:
        self.planning_time = 0.
      if self.expanded_states is None:
        self.expanded_states = 0
    else:
      self.result = False
      self.status_flags = 0
      self.footstep_plan = flor_footstep_planner_msgs.msg.FootstepPlan()
      self.feet_start_poses = flor_footstep_planner_msgs.msg.FeetPoses()
      self.costs = 0.
      self.final_eps = 0.
      self.planning_time = 0.
      self.expanded_states = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B4I.pack(_x.result, _x.status_flags, _x.footstep_plan.header.seq, _x.footstep_plan.header.stamp.secs, _x.footstep_plan.header.stamp.nsecs))
      _x = self.footstep_plan.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.footstep_plan.planning_mode))
      length = len(self.footstep_plan.step_plan)
      buff.write(_struct_I.pack(length))
      for val1 in self.footstep_plan.step_plan:
        _v1 = val1.header
        buff.write(_struct_I.pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_iB4fi5f.pack(_x.step_index, _x.foot_index, _x.step_duration, _x.sway_duration, _x.swing_height, _x.lift_height, _x.toe_off, _x.knee_nominal, _x.max_body_accel, _x.max_foot_vel, _x.sway_end_dist, _x.step_end_dist))
      _x = self
      buff.write(_struct_3I.pack(_x.feet_start_poses.header.seq, _x.feet_start_poses.header.stamp.secs, _x.feet_start_poses.header.stamp.nsecs))
      _x = self.feet_start_poses.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3dq.pack(_x.costs, _x.final_eps, _x.planning_time, _x.expanded_states))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.footstep_plan is None:
        self.footstep_plan = flor_footstep_planner_msgs.msg.FootstepPlan()
      if self.feet_start_poses is None:
        self.feet_start_poses = flor_footstep_planner_msgs.msg.FeetPoses()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.result, _x.status_flags, _x.footstep_plan.header.seq, _x.footstep_plan.header.stamp.secs, _x.footstep_plan.header.stamp.nsecs,) = _struct_B4I.unpack(str[start:end])
      self.result = bool(self.result)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.footstep_plan.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.footstep_plan.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.footstep_plan.planning_mode,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.footstep_plan.step_plan = []
      for i in range(0, length):
        val1 = flor_footstep_planner_msgs.msg.StepTarget()
        _v3 = val1.header
        start = end
        end += 4
        (_v3.seq,) = _struct_I.unpack(str[start:end])
        _v4 = _v3.stamp
        _x = _v4
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v3.frame_id = str[start:end].decode('utf-8')
        else:
          _v3.frame_id = str[start:end]
        _x = val1
        start = end
        end += 45
        (_x.step_index, _x.foot_index, _x.step_duration, _x.sway_duration, _x.swing_height, _x.lift_height, _x.toe_off, _x.knee_nominal, _x.max_body_accel, _x.max_foot_vel, _x.sway_end_dist, _x.step_end_dist,) = _struct_iB4fi5f.unpack(str[start:end])
        self.footstep_plan.step_plan.append(val1)
      _x = self
      start = end
      end += 12
      (_x.feet_start_poses.header.seq, _x.feet_start_poses.header.stamp.secs, _x.feet_start_poses.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.feet_start_poses.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.feet_start_poses.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.costs, _x.final_eps, _x.planning_time, _x.expanded_states,) = _struct_3dq.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B4I.pack(_x.result, _x.status_flags, _x.footstep_plan.header.seq, _x.footstep_plan.header.stamp.secs, _x.footstep_plan.header.stamp.nsecs))
      _x = self.footstep_plan.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.footstep_plan.planning_mode))
      length = len(self.footstep_plan.step_plan)
      buff.write(_struct_I.pack(length))
      for val1 in self.footstep_plan.step_plan:
        _v5 = val1.header
        buff.write(_struct_I.pack(_v5.seq))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_iB4fi5f.pack(_x.step_index, _x.foot_index, _x.step_duration, _x.sway_duration, _x.swing_height, _x.lift_height, _x.toe_off, _x.knee_nominal, _x.max_body_accel, _x.max_foot_vel, _x.sway_end_dist, _x.step_end_dist))
      _x = self
      buff.write(_struct_3I.pack(_x.feet_start_poses.header.seq, _x.feet_start_poses.header.stamp.secs, _x.feet_start_poses.header.stamp.nsecs))
      _x = self.feet_start_poses.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3dq.pack(_x.costs, _x.final_eps, _x.planning_time, _x.expanded_states))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.footstep_plan is None:
        self.footstep_plan = flor_footstep_planner_msgs.msg.FootstepPlan()
      if self.feet_start_poses is None:
        self.feet_start_poses = flor_footstep_planner_msgs.msg.FeetPoses()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.result, _x.status_flags, _x.footstep_plan.header.seq, _x.footstep_plan.header.stamp.secs, _x.footstep_plan.header.stamp.nsecs,) = _struct_B4I.unpack(str[start:end])
      self.result = bool(self.result)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.footstep_plan.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.footstep_plan.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.footstep_plan.planning_mode,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.footstep_plan.step_plan = []
      for i in range(0, length):
        val1 = flor_footstep_planner_msgs.msg.StepTarget()
        _v7 = val1.header
        start = end
        end += 4
        (_v7.seq,) = _struct_I.unpack(str[start:end])
        _v8 = _v7.stamp
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.frame_id = str[start:end].decode('utf-8')
        else:
          _v7.frame_id = str[start:end]
        _x = val1
        start = end
        end += 45
        (_x.step_index, _x.foot_index, _x.step_duration, _x.sway_duration, _x.swing_height, _x.lift_height, _x.toe_off, _x.knee_nominal, _x.max_body_accel, _x.max_foot_vel, _x.sway_end_dist, _x.step_end_dist,) = _struct_iB4fi5f.unpack(str[start:end])
        self.footstep_plan.step_plan.append(val1)
      _x = self
      start = end
      end += 12
      (_x.feet_start_poses.header.seq, _x.feet_start_poses.header.stamp.secs, _x.feet_start_poses.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.feet_start_poses.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.feet_start_poses.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.costs, _x.final_eps, _x.planning_time, _x.expanded_states,) = _struct_3dq.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_3dq = struct.Struct("<3dq")
_struct_3I = struct.Struct("<3I")
_struct_iB4fi5f = struct.Struct("<iB4fi5f")
_struct_B4I = struct.Struct("<B4I")
_struct_2I = struct.Struct("<2I")
class PlanStepping(object):
  _type          = 'flor_footstep_planner_msgs/PlanStepping'
  _md5sum = '6075aef559a85947888734e08d45a29f'
  _request_class  = PlanSteppingRequest
  _response_class = PlanSteppingResponse
