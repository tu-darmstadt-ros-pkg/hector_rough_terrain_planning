"""autogenerated by genpy from flor_footstep_planner_msgs/PlanFootstepsSimpleRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class PlanFootstepsSimpleRequest(genpy.Message):
  _md5sum = "84f5f36abb735747fce72edca7a2b271"
  _type = "flor_footstep_planner_msgs/PlanFootstepsSimpleRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
uint8 planning_mode


geometry_msgs/PoseStamped goal_pose

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['planning_mode','goal_pose']
  _slot_types = ['uint8','geometry_msgs/PoseStamped']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       planning_mode,goal_pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanFootstepsSimpleRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.planning_mode is None:
        self.planning_mode = 0
      if self.goal_pose is None:
        self.goal_pose = geometry_msgs.msg.PoseStamped()
    else:
      self.planning_mode = 0
      self.goal_pose = geometry_msgs.msg.PoseStamped()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B3I.pack(_x.planning_mode, _x.goal_pose.header.seq, _x.goal_pose.header.stamp.secs, _x.goal_pose.header.stamp.nsecs))
      _x = self.goal_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.goal_pose.pose.position.x, _x.goal_pose.pose.position.y, _x.goal_pose.pose.position.z, _x.goal_pose.pose.orientation.x, _x.goal_pose.pose.orientation.y, _x.goal_pose.pose.orientation.z, _x.goal_pose.pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.goal_pose is None:
        self.goal_pose = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 13
      (_x.planning_mode, _x.goal_pose.header.seq, _x.goal_pose.header.stamp.secs, _x.goal_pose.header.stamp.nsecs,) = _struct_B3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.goal_pose.pose.position.x, _x.goal_pose.pose.position.y, _x.goal_pose.pose.position.z, _x.goal_pose.pose.orientation.x, _x.goal_pose.pose.orientation.y, _x.goal_pose.pose.orientation.z, _x.goal_pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B3I.pack(_x.planning_mode, _x.goal_pose.header.seq, _x.goal_pose.header.stamp.secs, _x.goal_pose.header.stamp.nsecs))
      _x = self.goal_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.goal_pose.pose.position.x, _x.goal_pose.pose.position.y, _x.goal_pose.pose.position.z, _x.goal_pose.pose.orientation.x, _x.goal_pose.pose.orientation.y, _x.goal_pose.pose.orientation.z, _x.goal_pose.pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.goal_pose is None:
        self.goal_pose = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 13
      (_x.planning_mode, _x.goal_pose.header.seq, _x.goal_pose.header.stamp.secs, _x.goal_pose.header.stamp.nsecs,) = _struct_B3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.goal_pose.pose.position.x, _x.goal_pose.pose.position.y, _x.goal_pose.pose.position.z, _x.goal_pose.pose.orientation.x, _x.goal_pose.pose.orientation.y, _x.goal_pose.pose.orientation.z, _x.goal_pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7d = struct.Struct("<7d")
_struct_B3I = struct.Struct("<B3I")
"""autogenerated by genpy from flor_footstep_planner_msgs/PlanFootstepsSimpleResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PlanFootstepsSimpleResponse(genpy.Message):
  _md5sum = "3633d009f9e9da9a7b0019bac8df110e"
  _type = "flor_footstep_planner_msgs/PlanFootstepsSimpleResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
bool result
uint32 status_flags


"""
  __slots__ = ['result','status_flags']
  _slot_types = ['bool','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result,status_flags

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanFootstepsSimpleResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = False
      if self.status_flags is None:
        self.status_flags = 0
    else:
      self.result = False
      self.status_flags = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_BI.pack(_x.result, _x.status_flags))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.result, _x.status_flags,) = _struct_BI.unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_BI.pack(_x.result, _x.status_flags))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.result, _x.status_flags,) = _struct_BI.unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_BI = struct.Struct("<BI")
class PlanFootstepsSimple(object):
  _type          = 'flor_footstep_planner_msgs/PlanFootstepsSimple'
  _md5sum = '67e8835e7486aaa5027f0a260343a824'
  _request_class  = PlanFootstepsSimpleRequest
  _response_class = PlanFootstepsSimpleResponse
