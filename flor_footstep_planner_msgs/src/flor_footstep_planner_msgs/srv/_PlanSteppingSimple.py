"""autogenerated by genpy from flor_footstep_planner_msgs/PlanSteppingSimpleRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import flor_footstep_planner_msgs.msg

class PlanSteppingSimpleRequest(genpy.Message):
  _md5sum = "285f020dfe12caa228c70620a93a9764"
  _type = "flor_footstep_planner_msgs/PlanSteppingSimpleRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """flor_footstep_planner_msgs/Stepping stepping

================================================================================
MSG: flor_footstep_planner_msgs/Stepping
# for special walk modes
uint8 planning_mode         # select planning mode (see FootstepPlan.msg)

uint8 steps # number of steps which should be executed
bool ignore_collision

float32 step_distance_forward   # [m]
float32 step_distance_sideward  # [m]
float32 turn_angle              # [rad]

bool close_step
bool swap_start_foot
bool extra_seperation

bool use_terrain
bool generate_terrain_model

bool override
float32 roll
float32 pitch
float32 swing_height
float32 lift_height
float32 knee_nominal
float32 goal_z

uint8 walk_mode

# walk modes
uint8 FORWARD       = 0 # special modes starting here
uint8 BACKWARD      = 1
uint8 STRAFE_LEFT   = 2
uint8 STRAFE_RIGHT  = 3
uint8 ROTATE_LEFT   = 4
uint8 ROTATE_RIGHT  = 5
uint8 SAMPLING      = 6

"""
  __slots__ = ['stepping']
  _slot_types = ['flor_footstep_planner_msgs/Stepping']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stepping

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanSteppingSimpleRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stepping is None:
        self.stepping = flor_footstep_planner_msgs.msg.Stepping()
    else:
      self.stepping = flor_footstep_planner_msgs.msg.Stepping()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3B3f6B6fB.pack(_x.stepping.planning_mode, _x.stepping.steps, _x.stepping.ignore_collision, _x.stepping.step_distance_forward, _x.stepping.step_distance_sideward, _x.stepping.turn_angle, _x.stepping.close_step, _x.stepping.swap_start_foot, _x.stepping.extra_seperation, _x.stepping.use_terrain, _x.stepping.generate_terrain_model, _x.stepping.override, _x.stepping.roll, _x.stepping.pitch, _x.stepping.swing_height, _x.stepping.lift_height, _x.stepping.knee_nominal, _x.stepping.goal_z, _x.stepping.walk_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stepping is None:
        self.stepping = flor_footstep_planner_msgs.msg.Stepping()
      end = 0
      _x = self
      start = end
      end += 46
      (_x.stepping.planning_mode, _x.stepping.steps, _x.stepping.ignore_collision, _x.stepping.step_distance_forward, _x.stepping.step_distance_sideward, _x.stepping.turn_angle, _x.stepping.close_step, _x.stepping.swap_start_foot, _x.stepping.extra_seperation, _x.stepping.use_terrain, _x.stepping.generate_terrain_model, _x.stepping.override, _x.stepping.roll, _x.stepping.pitch, _x.stepping.swing_height, _x.stepping.lift_height, _x.stepping.knee_nominal, _x.stepping.goal_z, _x.stepping.walk_mode,) = _struct_3B3f6B6fB.unpack(str[start:end])
      self.stepping.ignore_collision = bool(self.stepping.ignore_collision)
      self.stepping.close_step = bool(self.stepping.close_step)
      self.stepping.swap_start_foot = bool(self.stepping.swap_start_foot)
      self.stepping.extra_seperation = bool(self.stepping.extra_seperation)
      self.stepping.use_terrain = bool(self.stepping.use_terrain)
      self.stepping.generate_terrain_model = bool(self.stepping.generate_terrain_model)
      self.stepping.override = bool(self.stepping.override)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3B3f6B6fB.pack(_x.stepping.planning_mode, _x.stepping.steps, _x.stepping.ignore_collision, _x.stepping.step_distance_forward, _x.stepping.step_distance_sideward, _x.stepping.turn_angle, _x.stepping.close_step, _x.stepping.swap_start_foot, _x.stepping.extra_seperation, _x.stepping.use_terrain, _x.stepping.generate_terrain_model, _x.stepping.override, _x.stepping.roll, _x.stepping.pitch, _x.stepping.swing_height, _x.stepping.lift_height, _x.stepping.knee_nominal, _x.stepping.goal_z, _x.stepping.walk_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stepping is None:
        self.stepping = flor_footstep_planner_msgs.msg.Stepping()
      end = 0
      _x = self
      start = end
      end += 46
      (_x.stepping.planning_mode, _x.stepping.steps, _x.stepping.ignore_collision, _x.stepping.step_distance_forward, _x.stepping.step_distance_sideward, _x.stepping.turn_angle, _x.stepping.close_step, _x.stepping.swap_start_foot, _x.stepping.extra_seperation, _x.stepping.use_terrain, _x.stepping.generate_terrain_model, _x.stepping.override, _x.stepping.roll, _x.stepping.pitch, _x.stepping.swing_height, _x.stepping.lift_height, _x.stepping.knee_nominal, _x.stepping.goal_z, _x.stepping.walk_mode,) = _struct_3B3f6B6fB.unpack(str[start:end])
      self.stepping.ignore_collision = bool(self.stepping.ignore_collision)
      self.stepping.close_step = bool(self.stepping.close_step)
      self.stepping.swap_start_foot = bool(self.stepping.swap_start_foot)
      self.stepping.extra_seperation = bool(self.stepping.extra_seperation)
      self.stepping.use_terrain = bool(self.stepping.use_terrain)
      self.stepping.generate_terrain_model = bool(self.stepping.generate_terrain_model)
      self.stepping.override = bool(self.stepping.override)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3B3f6B6fB = struct.Struct("<3B3f6B6fB")
"""autogenerated by genpy from flor_footstep_planner_msgs/PlanSteppingSimpleResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PlanSteppingSimpleResponse(genpy.Message):
  _md5sum = "3633d009f9e9da9a7b0019bac8df110e"
  _type = "flor_footstep_planner_msgs/PlanSteppingSimpleResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool result
uint32 status_flags


"""
  __slots__ = ['result','status_flags']
  _slot_types = ['bool','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result,status_flags

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanSteppingSimpleResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = False
      if self.status_flags is None:
        self.status_flags = 0
    else:
      self.result = False
      self.status_flags = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_BI.pack(_x.result, _x.status_flags))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.result, _x.status_flags,) = _struct_BI.unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_BI.pack(_x.result, _x.status_flags))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.result, _x.status_flags,) = _struct_BI.unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_BI = struct.Struct("<BI")
class PlanSteppingSimple(object):
  _type          = 'flor_footstep_planner_msgs/PlanSteppingSimple'
  _md5sum = '1695a360ad2d57a9e40781a9fcffa934'
  _request_class  = PlanSteppingSimpleRequest
  _response_class = PlanSteppingSimpleResponse
