"""autogenerated by genpy from flor_footstep_planner_msgs/SteppingRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import flor_footstep_planner_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class SteppingRequest(genpy.Message):
  _md5sum = "975b96b020f7993f5bd2bee82ed93946"
  _type = "flor_footstep_planner_msgs/SteppingRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# service message for simple stepping
# start precision
uint8 start_type            # start pose precision (see FootstepPlan.srv)

geometry_msgs/Pose start
flor_footstep_planner_msgs/FeetPoses feet_start_poses

flor_footstep_planner_msgs/Stepping stepping

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: flor_footstep_planner_msgs/FeetPoses
std_msgs/Header header
#flor_atlas_msgs/AtlasBehaviorFootData left
#flor_atlas_msgs/AtlasBehaviorFootData right

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: flor_footstep_planner_msgs/Stepping
# for special walk modes
uint8 planning_mode         # select planning mode (see FootstepPlan.msg)

uint8 steps # number of steps which should be executed
bool ignore_collision

float32 step_distance_forward   # [m]
float32 step_distance_sideward  # [m]
float32 turn_angle              # [rad]

bool close_step
bool swap_start_foot
bool extra_seperation

bool use_terrain
bool generate_terrain_model

bool override
float32 roll
float32 pitch
float32 swing_height
float32 lift_height
float32 knee_nominal
float32 goal_z

uint8 walk_mode

# walk modes
uint8 FORWARD       = 0 # special modes starting here
uint8 BACKWARD      = 1
uint8 STRAFE_LEFT   = 2
uint8 STRAFE_RIGHT  = 3
uint8 ROTATE_LEFT   = 4
uint8 ROTATE_RIGHT  = 5
uint8 SAMPLING      = 6

"""
  __slots__ = ['start_type','start','feet_start_poses','stepping']
  _slot_types = ['uint8','geometry_msgs/Pose','flor_footstep_planner_msgs/FeetPoses','flor_footstep_planner_msgs/Stepping']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start_type,start,feet_start_poses,stepping

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SteppingRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.start_type is None:
        self.start_type = 0
      if self.start is None:
        self.start = geometry_msgs.msg.Pose()
      if self.feet_start_poses is None:
        self.feet_start_poses = flor_footstep_planner_msgs.msg.FeetPoses()
      if self.stepping is None:
        self.stepping = flor_footstep_planner_msgs.msg.Stepping()
    else:
      self.start_type = 0
      self.start = geometry_msgs.msg.Pose()
      self.feet_start_poses = flor_footstep_planner_msgs.msg.FeetPoses()
      self.stepping = flor_footstep_planner_msgs.msg.Stepping()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B7d3I.pack(_x.start_type, _x.start.position.x, _x.start.position.y, _x.start.position.z, _x.start.orientation.x, _x.start.orientation.y, _x.start.orientation.z, _x.start.orientation.w, _x.feet_start_poses.header.seq, _x.feet_start_poses.header.stamp.secs, _x.feet_start_poses.header.stamp.nsecs))
      _x = self.feet_start_poses.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3B3f6B6fB.pack(_x.stepping.planning_mode, _x.stepping.steps, _x.stepping.ignore_collision, _x.stepping.step_distance_forward, _x.stepping.step_distance_sideward, _x.stepping.turn_angle, _x.stepping.close_step, _x.stepping.swap_start_foot, _x.stepping.extra_seperation, _x.stepping.use_terrain, _x.stepping.generate_terrain_model, _x.stepping.override, _x.stepping.roll, _x.stepping.pitch, _x.stepping.swing_height, _x.stepping.lift_height, _x.stepping.knee_nominal, _x.stepping.goal_z, _x.stepping.walk_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.start is None:
        self.start = geometry_msgs.msg.Pose()
      if self.feet_start_poses is None:
        self.feet_start_poses = flor_footstep_planner_msgs.msg.FeetPoses()
      if self.stepping is None:
        self.stepping = flor_footstep_planner_msgs.msg.Stepping()
      end = 0
      _x = self
      start = end
      end += 69
      (_x.start_type, _x.start.position.x, _x.start.position.y, _x.start.position.z, _x.start.orientation.x, _x.start.orientation.y, _x.start.orientation.z, _x.start.orientation.w, _x.feet_start_poses.header.seq, _x.feet_start_poses.header.stamp.secs, _x.feet_start_poses.header.stamp.nsecs,) = _struct_B7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.feet_start_poses.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.feet_start_poses.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 46
      (_x.stepping.planning_mode, _x.stepping.steps, _x.stepping.ignore_collision, _x.stepping.step_distance_forward, _x.stepping.step_distance_sideward, _x.stepping.turn_angle, _x.stepping.close_step, _x.stepping.swap_start_foot, _x.stepping.extra_seperation, _x.stepping.use_terrain, _x.stepping.generate_terrain_model, _x.stepping.override, _x.stepping.roll, _x.stepping.pitch, _x.stepping.swing_height, _x.stepping.lift_height, _x.stepping.knee_nominal, _x.stepping.goal_z, _x.stepping.walk_mode,) = _struct_3B3f6B6fB.unpack(str[start:end])
      self.stepping.ignore_collision = bool(self.stepping.ignore_collision)
      self.stepping.close_step = bool(self.stepping.close_step)
      self.stepping.swap_start_foot = bool(self.stepping.swap_start_foot)
      self.stepping.extra_seperation = bool(self.stepping.extra_seperation)
      self.stepping.use_terrain = bool(self.stepping.use_terrain)
      self.stepping.generate_terrain_model = bool(self.stepping.generate_terrain_model)
      self.stepping.override = bool(self.stepping.override)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B7d3I.pack(_x.start_type, _x.start.position.x, _x.start.position.y, _x.start.position.z, _x.start.orientation.x, _x.start.orientation.y, _x.start.orientation.z, _x.start.orientation.w, _x.feet_start_poses.header.seq, _x.feet_start_poses.header.stamp.secs, _x.feet_start_poses.header.stamp.nsecs))
      _x = self.feet_start_poses.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3B3f6B6fB.pack(_x.stepping.planning_mode, _x.stepping.steps, _x.stepping.ignore_collision, _x.stepping.step_distance_forward, _x.stepping.step_distance_sideward, _x.stepping.turn_angle, _x.stepping.close_step, _x.stepping.swap_start_foot, _x.stepping.extra_seperation, _x.stepping.use_terrain, _x.stepping.generate_terrain_model, _x.stepping.override, _x.stepping.roll, _x.stepping.pitch, _x.stepping.swing_height, _x.stepping.lift_height, _x.stepping.knee_nominal, _x.stepping.goal_z, _x.stepping.walk_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.start is None:
        self.start = geometry_msgs.msg.Pose()
      if self.feet_start_poses is None:
        self.feet_start_poses = flor_footstep_planner_msgs.msg.FeetPoses()
      if self.stepping is None:
        self.stepping = flor_footstep_planner_msgs.msg.Stepping()
      end = 0
      _x = self
      start = end
      end += 69
      (_x.start_type, _x.start.position.x, _x.start.position.y, _x.start.position.z, _x.start.orientation.x, _x.start.orientation.y, _x.start.orientation.z, _x.start.orientation.w, _x.feet_start_poses.header.seq, _x.feet_start_poses.header.stamp.secs, _x.feet_start_poses.header.stamp.nsecs,) = _struct_B7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.feet_start_poses.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.feet_start_poses.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 46
      (_x.stepping.planning_mode, _x.stepping.steps, _x.stepping.ignore_collision, _x.stepping.step_distance_forward, _x.stepping.step_distance_sideward, _x.stepping.turn_angle, _x.stepping.close_step, _x.stepping.swap_start_foot, _x.stepping.extra_seperation, _x.stepping.use_terrain, _x.stepping.generate_terrain_model, _x.stepping.override, _x.stepping.roll, _x.stepping.pitch, _x.stepping.swing_height, _x.stepping.lift_height, _x.stepping.knee_nominal, _x.stepping.goal_z, _x.stepping.walk_mode,) = _struct_3B3f6B6fB.unpack(str[start:end])
      self.stepping.ignore_collision = bool(self.stepping.ignore_collision)
      self.stepping.close_step = bool(self.stepping.close_step)
      self.stepping.swap_start_foot = bool(self.stepping.swap_start_foot)
      self.stepping.extra_seperation = bool(self.stepping.extra_seperation)
      self.stepping.use_terrain = bool(self.stepping.use_terrain)
      self.stepping.generate_terrain_model = bool(self.stepping.generate_terrain_model)
      self.stepping.override = bool(self.stepping.override)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B7d3I = struct.Struct("<B7d3I")
_struct_3B3f6B6fB = struct.Struct("<3B3f6B6fB")
