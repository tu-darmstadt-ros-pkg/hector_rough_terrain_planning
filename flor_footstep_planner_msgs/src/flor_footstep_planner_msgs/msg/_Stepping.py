"""autogenerated by genpy from flor_footstep_planner_msgs/Stepping.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Stepping(genpy.Message):
  _md5sum = "e245b1f0748da59f64d24a22ce12d2eb"
  _type = "flor_footstep_planner_msgs/Stepping"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# for special walk modes
uint8 planning_mode         # select planning mode (see FootstepPlan.msg)

uint8 steps # number of steps which should be executed
bool ignore_collision

float32 step_distance_forward   # [m]
float32 step_distance_sideward  # [m]
float32 turn_angle              # [rad]

bool close_step
bool swap_start_foot
bool extra_seperation

bool use_terrain
bool generate_terrain_model

bool override
float32 roll
float32 pitch
float32 swing_height
float32 lift_height
float32 knee_nominal
float32 goal_z

uint8 walk_mode

# walk modes
uint8 FORWARD       = 0 # special modes starting here
uint8 BACKWARD      = 1
uint8 STRAFE_LEFT   = 2
uint8 STRAFE_RIGHT  = 3
uint8 ROTATE_LEFT   = 4
uint8 ROTATE_RIGHT  = 5
uint8 SAMPLING      = 6

"""
  # Pseudo-constants
  FORWARD = 0
  BACKWARD = 1
  STRAFE_LEFT = 2
  STRAFE_RIGHT = 3
  ROTATE_LEFT = 4
  ROTATE_RIGHT = 5
  SAMPLING = 6

  __slots__ = ['planning_mode','steps','ignore_collision','step_distance_forward','step_distance_sideward','turn_angle','close_step','swap_start_foot','extra_seperation','use_terrain','generate_terrain_model','override','roll','pitch','swing_height','lift_height','knee_nominal','goal_z','walk_mode']
  _slot_types = ['uint8','uint8','bool','float32','float32','float32','bool','bool','bool','bool','bool','bool','float32','float32','float32','float32','float32','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       planning_mode,steps,ignore_collision,step_distance_forward,step_distance_sideward,turn_angle,close_step,swap_start_foot,extra_seperation,use_terrain,generate_terrain_model,override,roll,pitch,swing_height,lift_height,knee_nominal,goal_z,walk_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Stepping, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.planning_mode is None:
        self.planning_mode = 0
      if self.steps is None:
        self.steps = 0
      if self.ignore_collision is None:
        self.ignore_collision = False
      if self.step_distance_forward is None:
        self.step_distance_forward = 0.
      if self.step_distance_sideward is None:
        self.step_distance_sideward = 0.
      if self.turn_angle is None:
        self.turn_angle = 0.
      if self.close_step is None:
        self.close_step = False
      if self.swap_start_foot is None:
        self.swap_start_foot = False
      if self.extra_seperation is None:
        self.extra_seperation = False
      if self.use_terrain is None:
        self.use_terrain = False
      if self.generate_terrain_model is None:
        self.generate_terrain_model = False
      if self.override is None:
        self.override = False
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.swing_height is None:
        self.swing_height = 0.
      if self.lift_height is None:
        self.lift_height = 0.
      if self.knee_nominal is None:
        self.knee_nominal = 0.
      if self.goal_z is None:
        self.goal_z = 0.
      if self.walk_mode is None:
        self.walk_mode = 0
    else:
      self.planning_mode = 0
      self.steps = 0
      self.ignore_collision = False
      self.step_distance_forward = 0.
      self.step_distance_sideward = 0.
      self.turn_angle = 0.
      self.close_step = False
      self.swap_start_foot = False
      self.extra_seperation = False
      self.use_terrain = False
      self.generate_terrain_model = False
      self.override = False
      self.roll = 0.
      self.pitch = 0.
      self.swing_height = 0.
      self.lift_height = 0.
      self.knee_nominal = 0.
      self.goal_z = 0.
      self.walk_mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3B3f6B6fB.pack(_x.planning_mode, _x.steps, _x.ignore_collision, _x.step_distance_forward, _x.step_distance_sideward, _x.turn_angle, _x.close_step, _x.swap_start_foot, _x.extra_seperation, _x.use_terrain, _x.generate_terrain_model, _x.override, _x.roll, _x.pitch, _x.swing_height, _x.lift_height, _x.knee_nominal, _x.goal_z, _x.walk_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 46
      (_x.planning_mode, _x.steps, _x.ignore_collision, _x.step_distance_forward, _x.step_distance_sideward, _x.turn_angle, _x.close_step, _x.swap_start_foot, _x.extra_seperation, _x.use_terrain, _x.generate_terrain_model, _x.override, _x.roll, _x.pitch, _x.swing_height, _x.lift_height, _x.knee_nominal, _x.goal_z, _x.walk_mode,) = _struct_3B3f6B6fB.unpack(str[start:end])
      self.ignore_collision = bool(self.ignore_collision)
      self.close_step = bool(self.close_step)
      self.swap_start_foot = bool(self.swap_start_foot)
      self.extra_seperation = bool(self.extra_seperation)
      self.use_terrain = bool(self.use_terrain)
      self.generate_terrain_model = bool(self.generate_terrain_model)
      self.override = bool(self.override)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3B3f6B6fB.pack(_x.planning_mode, _x.steps, _x.ignore_collision, _x.step_distance_forward, _x.step_distance_sideward, _x.turn_angle, _x.close_step, _x.swap_start_foot, _x.extra_seperation, _x.use_terrain, _x.generate_terrain_model, _x.override, _x.roll, _x.pitch, _x.swing_height, _x.lift_height, _x.knee_nominal, _x.goal_z, _x.walk_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 46
      (_x.planning_mode, _x.steps, _x.ignore_collision, _x.step_distance_forward, _x.step_distance_sideward, _x.turn_angle, _x.close_step, _x.swap_start_foot, _x.extra_seperation, _x.use_terrain, _x.generate_terrain_model, _x.override, _x.roll, _x.pitch, _x.swing_height, _x.lift_height, _x.knee_nominal, _x.goal_z, _x.walk_mode,) = _struct_3B3f6B6fB.unpack(str[start:end])
      self.ignore_collision = bool(self.ignore_collision)
      self.close_step = bool(self.close_step)
      self.swap_start_foot = bool(self.swap_start_foot)
      self.extra_seperation = bool(self.extra_seperation)
      self.use_terrain = bool(self.use_terrain)
      self.generate_terrain_model = bool(self.generate_terrain_model)
      self.override = bool(self.override)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3B3f6B6fB = struct.Struct("<3B3f6B6fB")
